server:
  port: 18000

spring:
  application:
    name: chatting-server

  data:
    mongodb:
      host: localhost
      port: 18100
      database: chatting
      username: chatting-admin
      password: JMTpdsu8YkLEX4RA
      authentication-database: admin

  kafka:
    bootstrap-servers: localhost:40000,localhost:40001,localhost:40002

    topic:
      chat-name: message
      room-name: room

    consumer:
      room-consumer:
        group-id: room-group
        auto-offset-reset: latest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.JsonDeserializer

      chat-consumer:
        group-id: chat-group
        auto-offset-reset: latest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.JsonDeserializer

    producer:
      room-producer:
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.JsonSerializer

      chat-producer:
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.JsonSerializer

eureka:
  instance:
    hostname: localhost
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:34100/eureka

passport:
  algorithm: SHA-256
  key: SECRET_KEY

management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3_single
      produce: b3_multi
  zipkin:
    tracing:
      endpoint: "http://localhost:43000/api/v2/spans"

logging:
  pattern:
    level: "%5p [%X{traceId:-},%X{spanId:-}]"
